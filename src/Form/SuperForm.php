<?php

namespace Drupal\supervalidator\Form;

use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements a form for some validation.
 *
 * Empty values not taken into consideration. So if some tables or years was
 * added but not filled with values it will be ignored.
 * Empty form causes error.
 */
class SuperForm extends FormBase {

  /**
   * {@inheritdoc}
   */
  public function getFormId(): string {
    return 'super_form';
  }

  /**
   * Build a header for the form table.
   *
   * @return array
   *   An array with column titles.
   */
  protected function buildHeader(): array {
    // Add the year column title.
    $header[0] = 'Year';

    // Add the month names and titles for the quarters columns.
    for ($i = 1; $i < 13; $i++) {
      $timestamp = mktime(0, 0, 0, $i, 1);
      $header[$i] = date('M', $timestamp);
      // After each of 3 month add the appropriate quarter title.
      if ($i % 3 == 0) {
        $header['Q' . intdiv($i, 3)] = 'Q' . intdiv($i, 3);
      }
    }

    // Add the year summary column title.
    $header[] = 'YTD';

    return $header;
  }

  /**
   * Build a year row for the form table.
   *
   * @param string $year_value
   *   A number of the year.
   * @param array $header
   *   An array of header titles generated by ::buildHeader method.
   *
   * @return array
   *   An array with cells of the year row.
   */
  protected function buildYear($year_value, array $header): array {
    $year = [];
    foreach ($header as $key => $title) {
      // Add appropriate elements to the array for each type of cells.
      switch ($title) {
        // Year cell has no input element, just text.
        case 'Year':
          $year[$year_value][$title] = [
            '#plain_text' => $year_value,
          ];
          break;

        // Quarter and year cells.
        case 'Q1':
        case 'Q2':
        case 'Q3':
        case 'Q4':
        case 'YTD':
          $year[$year_value][$title] = [
            '#type' => 'number',
            '#min' => 0,
            '#step' => 0.01,
          ];
          break;

        // Set the months numbers as array keys for the month cells.
        // It will be helpful on validation.
        default:
          $year[$year_value][$key] = [
            '#type' => 'number',
            '#min' => 0,
            '#step' => 0.01,
          ];
      }
    }

    return $year;
  }

  /**
   * Build a table render element inside a fieldset for the form.
   *
   * @param int $table_num
   *   A number of a table to build.
   * @param array $years_list
   *   A list of year to build appropriate rows.
   *
   * @return array
   *   A render array.
   */
  protected function buildTable($table_num, array $years_list): array {
    // Add fieldset wrapping each table to look good.
    $table = [
      '#type' => 'fieldset',
      '#title' => $this->t('Table #@table_number', [
        '@table_number' => $table_num,
      ]),
    ];

    // Element contains action buttons. Just one in this case at the top.
    $table['actions'] = [
      '#type' => 'actions',
      '#weight' => -100,
    ];

    // Button to add year row.
    $table['actions']['add_year'] = [
      '#type' => 'button',
      '#name' => 'addYear_' . $table_num,
      '#value' => $this->t('Add year'),
      '#submit' => ['::add'],
      '#ajax' => [
        'callback' => '::addCallback',
        'wrapper' => 'super_form',
        'progress' => [
          'type' => 'throbber',
          'message' => 'Adding a year...',
        ],
        'effect' => 'slide',
        'speed' => 800,
      ],
    ];

    // Element containing a table render element.
    $table['rows'] = [
      '#type' => 'table',
      '#header' => $this->buildHeader(),
      '#sticky' => TRUE,
      '#header_columns' => 18,
    ];

    // Years rows.
    foreach ($years_list as $year_value) {
      $table['rows'] += $this->buildYear($year_value, $table['rows']['#header']);
    }

    return $table;
  }

  /**
   * {@inheritdoc}
   */
  public function buildForm(array $form, FormStateInterface $form_state) {
    // Turn on tree mode as we have a two dimensional arrays.
    $form['#tree'] = TRUE;
    // Attaching style and JS to the form.
    $form['#attached'] = ['library' => ['supervalidator/form']];
    $form['#attributes'] = [
      'id' => $this->getFormId(),
    ];

    // Gather the current form structure state.
    $tables_state = $form_state->getValues()['tables'] ?? NULL;
    // Get the triggering button name to know in which table it was triggered.
    $button = $form_state->getTriggeringElement()['#name'] ?? '';

    // Set default values for the initial form building.
    $table_to_add = FALSE;
    if ($tables_state === NULL) {
      $tables_count = 1;
    }
    else {
      $tables_count = count($tables_state);
    }

    // If any of add buttons was pressed set appropriate parameters.
    $button = preg_split("/_/s", $button);
    switch ($button[0]) {
      case 'addTable':
        $tables_count++;
        break;

      case 'addYear':
        $table_to_add = $button[1];
    }

    // Build tables.
    for ($i = 1; $i <= $tables_count; $i++) {
      // If it is initial building we have only one row with the current year.
      $years_list = isset($tables_state[$i]) ? array_keys($tables_state[$i]['rows']) : [date('Y')];
      // If Add year button was pressed add a year to build one more row.
      if ($table_to_add == $i) {
        $min = min($years_list);
        array_unshift($years_list, $min - 1);
      }
      // Add a table.
      $form['tables'][$i] = $this->buildTable($i, $years_list);
    }

    // Button for adding a table to the form.
    $form['actions']['add_table'] = [
      '#type' => 'button',
      '#name' => 'addTable',
      '#value' => $this->t('Add table'),
      '#submit' => ['::add'],
      '#ajax' => [
        'callback' => '::addCallback',
        'wrapper' => 'super_form',
        'progress' => [
          'type' => 'throbber',
          'message' => 'Adding a table...',
        ],
        'effect' => 'slide',
        'speed' => 800,
      ],
    ];

    // Submit button which triggers a validation.
    $form['actions']['submit'] = [
      '#type' => 'submit',
      '#name' => 'submit',
      '#value' => $this->t('Submit'),
    ];

    return $form;
  }

  /**
   * Submit handler for the add buttons of the form.
   *
   * Just initiate the form rebuilding. All necessary parameters
   * will be get in the ::buildForm method.
   *
   * @param array $form
   *   An associative array containing the elements of the form.
   * @param \Drupal\Core\Form\FormStateInterface $form_state
   *   An associative array containing the structure of the form.
   */
  public function add(array &$form, FormStateInterface $form_state) {
    $form_state->setRebuild();
  }

  /**
   * AJAX callback for the add buttons of the form.
   *
   * @param array $form
   *   An associative array containing the elements of the form.
   * @param \Drupal\Core\Form\FormStateInterface $form_state
   *   An associative array containing the structure of the form.
   *
   * @return array
   *   A render array containing the form render element.
   */
  public function addCallback(array &$form, FormStateInterface $form_state) {
    return $form;
  }

  /**
   * {@inheritdoc}
   */
  public function validateForm(array &$form, FormStateInterface $form_state) {
    // Start validation only if submit button triggered.
    if ($form_state->getTriggeringElement()['#name'] == 'submit') {
      // Get array of the input values.
      $tables = $form_state->getValue('tables');
      // Variables to store the common not empty period of values
      // what should be the same for all tables.
      $period_start = NULL;
      $period_end = NULL;

      // Walk across the tables.
      foreach ($tables as $table_num => $table) {
        // Variables to store period inside one table.
        $start = NULL;
        $end = NULL;
        // Indicates that period is completed.
        $completed = FALSE;

        // Walk across the years (table rows).
        foreach ($table['rows'] as $year => $months) {
          // Walk across the months cells only not summaries and year.
          for ($i = 1; $i <= 12; $i++) {
            // If cell is not empty...
            if ($months[$i] !== '') {
              // Check if period had been completed.
              if ($completed) {
                // If so, we have interrupted period. So set an error.
                // These setting necessary to avoid empty form error
                // cause all of the loops will be broken and it will not be set.
                $period_start = $start;
                $period_end = $end;
                $form_state->setError($form['tables'][$table_num]['rows'][$year][$i], 'Invalid!');
                break(3);
              }
              // If period was not completed.
              else {
                // Set start and end if it does not exist.
                if (!$start) {
                  $start = mktime(0, 0, 0, $i, 1, $year);
                  $end = $start;
                }
                // Else just set end of the period at current month.
                else {
                  $end = mktime(0, 0, 0, $i, 1, $year);
                }
              }
            }
            // If cell is empty...
            else {
              // If end of the period is set, we have end of
              // uninterrupted period, so set the completed flag.
              if ($end) {
                $completed = TRUE;
              }
            }
          }
        }
        // If it isn't the first table we walking at and the common period is
        // set compare it with current table and set error if it isn't the same.
        if ($period_start && $period_end) {
          if (($period_start !== $start) || ($period_end !== $end)) {
            $form_state->setError($form['tables'][$table_num], 'Invalid!');
            break;
          }
        }
        // Else set the first found period as common to compare with.
        else {
          $period_start = $start;
          $period_end = $end;
        }
      }
      // If at the end we found nothing form is empty.
      if (!$period_start && !$period_end) {
        $form_state->setError($form, 'Form is empty!');
      }
    }
  }

  /**
   * {@inheritdoc}
   */
  public function submitForm(array &$form, FormStateInterface $form_state) {
    // Show the message of a successful validation.
    $this->messenger()->addMessage('Valid');
  }

}
